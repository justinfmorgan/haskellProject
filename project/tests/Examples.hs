module Examples where
import Ast (mkFreeVar, bindToLam, mkApp, Ast)

import Data.Set (Set, fromList)

data Res a = Res String Ast a

evalRes = 
    [Res "(\\y -> x) (x y)"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))(mkFreeVar "x"),
    Res "\\x -> (\\x -> x) z"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))(bindToLam "x"(mkFreeVar "z")),
    Res "\\z -> (\\z -> x) (\\x -> x)"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "z"(mkFreeVar "x")),
    Res "\\x -> (\\z -> x) x"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\z -> y) (y z)"((bindToLam "z"(mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "z")))(mkFreeVar "y"),
    Res "(\\x -> x x) (\\y -> z)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "z")))(mkFreeVar "z"),
    Res "(\\z -> z) (\\x -> x x)"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\z -> (\\x -> x) (x y)"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))),
    Res "(\\x -> x x) (\\z -> x x)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((mkFreeVar "x") `mkApp` (mkFreeVar "x")),
    Res "\\x -> (\\x -> y) (\\x -> x)"(bindToLam "x"((bindToLam "x"(mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "y")),
    Res "\\z -> (\\y -> x) (\\x -> y)"(bindToLam "z"((bindToLam "y"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "y"))))(bindToLam "z"(mkFreeVar "x")),
    Res "(\\x -> \\x -> x) (\\y -> x x)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> \\x -> x) (y y)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> x x) (z (x x))"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "\\z -> (\\y -> x) (z y)"(bindToLam "z"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y"))))(bindToLam "z"(mkFreeVar "x")),
    Res "(\\x -> y y) (x x z)"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z")))((mkFreeVar "y") `mkApp` (mkFreeVar "y")),
    Res "(\\x -> y y) z"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (mkFreeVar "z"))((mkFreeVar "y") `mkApp` (mkFreeVar "y")),
    Res "(\\x -> x) (\\x -> x) (\\y -> x x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "(\\x -> x) (\\x -> x) (x x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))((mkFreeVar "x") `mkApp` (mkFreeVar "x")),
    Res "(\\z -> z) ((\\x -> x) (\\x -> x))"((bindToLam "z"(mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\z -> \\z -> (\\z -> x) (\\z -> x)"(bindToLam "z"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x")))))(bindToLam "z"(bindToLam "z"(mkFreeVar "x"))),
    Res "(\\x -> x) (x x) (z x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x"))),
    Res "(\\z -> y y) ((\\x -> x) (x x))"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "y")),
    Res "y z ((\\x -> x) (x x))"(((mkFreeVar "y") `mkApp` (mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(((mkFreeVar "y") `mkApp` (mkFreeVar "z")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> y) (z x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "y")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "y")),
    Res "(\\x -> x) z (\\z -> y y)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")) `mkApp` (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))))((mkFreeVar "z") `mkApp` (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))),
    Res "\\x -> (\\x -> z) (\\x -> z)"(bindToLam "x"((bindToLam "x"(mkFreeVar "z")) `mkApp` (bindToLam "x"(mkFreeVar "z"))))(bindToLam "x"(mkFreeVar "z")),
    Res "(\\y -> y y) ((\\x -> x) z)"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))((mkFreeVar "z") `mkApp` (mkFreeVar "z")),
    Res "(\\y -> z) ((\\x -> x) z)"((bindToLam "y"(mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))(mkFreeVar "z"),
    Res "y y ((\\x -> x) z)"(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z")),
    Res "(\\x -> \\z -> x) (y (x x))"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "z"((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "(\\x -> \\z -> x) (z z)"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z")))(bindToLam "z'"((mkFreeVar "z") `mkApp` (mkFreeVar "z"))),
    Res "(\\x -> x) (\\x -> x) (\\x -> \\z -> x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "(\\x -> x) y ((\\x -> x) (x x))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "(\\x -> x) y (z x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))((mkFreeVar "y") `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x"))),
    Res "(\\x -> x) (\\x -> x) ((\\x -> x) y)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")))(mkFreeVar "y"),
    Res "z z ((\\x -> x) y)"(((mkFreeVar "z") `mkApp` (mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")))(((mkFreeVar "z") `mkApp` (mkFreeVar "z")) `mkApp` (mkFreeVar "y")),
    Res "(\\z -> \\z -> x) (x (x x))"((bindToLam "z"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "z"(mkFreeVar "x")),
    Res "(\\z -> \\z -> x) (x y)"((bindToLam "z"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))(bindToLam "z"(mkFreeVar "x")),
    Res "(\\y -> z) (\\z -> \\z -> x)"((bindToLam "y"(mkFreeVar "z")) `mkApp` (bindToLam "z"(bindToLam "z"(mkFreeVar "x"))))(mkFreeVar "z"),
    Res "(\\x -> x) x (y (x x))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((mkFreeVar "x") `mkApp` ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "(\\x -> x) x (\\z -> y)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "y")))((mkFreeVar "x") `mkApp` (bindToLam "z"(mkFreeVar "y"))),
    Res "\\x -> (\\y -> x) (y z)"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "z"))))(bindToLam "x"(mkFreeVar "x")),
    Res "z x ((\\x -> x) x)"(((mkFreeVar "z") `mkApp` (mkFreeVar "x")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")))(((mkFreeVar "z") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")),
    Res "(\\y -> \\z -> x) (x x (\\x -> x))"((bindToLam "y"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "z"(mkFreeVar "x")),
    Res "(\\x -> y x) (\\y -> \\z -> x)"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(bindToLam "z"(mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (bindToLam "y"(bindToLam "z"(mkFreeVar "x")))),
    Res "(\\x -> y x) (y (x x))"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` ((mkFreeVar "y") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "(\\x -> y x) (\\y -> x)"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "x")))((mkFreeVar "y") `mkApp` (bindToLam "y"(mkFreeVar "x"))),
    Res "(\\y -> x x) (\\x -> y x)"((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))((mkFreeVar "x") `mkApp` (mkFreeVar "x")),
    Res "(\\x -> y x) (z (\\x -> x))"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "y") `mkApp` ((mkFreeVar "z") `mkApp` (bindToLam "x"(mkFreeVar "x")))),
    Res "(\\z -> y x) (\\z -> y x)"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "x")),
    Res "(\\z -> y x) (z (x x))"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "x")),
    Res "(\\z -> y x) (x y)"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))((mkFreeVar "y") `mkApp` (mkFreeVar "x")),
    Res "(\\z -> y y) (\\z -> y x)"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "y")),
    Res "(\\x -> x) y (y (\\x -> x))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "y") `mkApp` ((mkFreeVar "y") `mkApp` (bindToLam "x"(mkFreeVar "x")))),
    Res "(\\y -> y x) (\\x -> y x)"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "x")),
    Res "(\\y -> y x) (x x y)"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")))((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x")),
    Res "(\\y -> y x) y"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "y"))((mkFreeVar "y") `mkApp` (mkFreeVar "x")),
    Res "(\\z -> y) (\\y -> y x)"((bindToLam "z"(mkFreeVar "y")) `mkApp` (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))))(mkFreeVar "y"),
    Res "(\\z -> y y) (x (\\x -> x))"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "y")),
    Res "y y (y y) ((\\x -> x) (\\x -> x))"((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"(mkFreeVar "x"))),
    Res "(\\z -> \\x -> x) (y y (y y))"((bindToLam "z"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\z -> (\\x -> x x) (z x)"(bindToLam "z"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x"))))(bindToLam "z"(((mkFreeVar "z") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))),
    Res "y y (\\x -> x) ((\\x -> x) z)"((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (mkFreeVar "z")),
    Res "(\\z -> y y) (y y (\\x -> x))"((bindToLam "z"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "y") `mkApp` (mkFreeVar "y")),
    Res "(\\y -> y x) (y y (x x))"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "x")),
    Res "\\y -> (\\y -> z) (x x z)"(bindToLam "y"((bindToLam "y"(mkFreeVar "z")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))(bindToLam "y"(mkFreeVar "z")),
    Res "(\\x -> x y) (\\y -> \\y -> x)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "y"(bindToLam "y"(mkFreeVar "x"))))(bindToLam "y"(mkFreeVar "x")),
    Res "(\\x -> x y) ((\\x -> x) (\\x -> x))"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(mkFreeVar "y"),
    Res "(\\x -> x y) (z x)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "x")))(((mkFreeVar "z") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")),
    Res "(\\y -> y x) (\\x -> x y)"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))((mkFreeVar "x") `mkApp` (mkFreeVar "y")),
    Res "\\x -> (\\z -> x x) (x x z)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "y y z ((\\x -> x) x)"((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")))((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z")) `mkApp` (mkFreeVar "x")),
    Res "\\y -> (\\z -> x x) (z y)"(bindToLam "y"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y"))))(bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "(\\y -> y y) (y y z)"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z")))((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z")) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "z"))),
    Res "\\z -> (\\z -> x x) (x x)"(bindToLam "z"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\z -> (\\z -> x x) x"(bindToLam "z"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "x")))(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "(\\z -> x y) (\\z -> \\x -> x)"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "z"(bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "x") `mkApp` (mkFreeVar "y")),
    Res "(\\z -> x y) (z y)"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y")))((mkFreeVar "x") `mkApp` (mkFreeVar "y")),
    Res "(\\x -> y x) (\\z -> x y)"((bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))((mkFreeVar "y") `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y")))),
    Res "(\\z -> y) (\\z -> x y)"((bindToLam "z"(mkFreeVar "y")) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))))(mkFreeVar "y"),
    Res "\\y -> \\y -> (\\x -> y) (\\y -> x)"(bindToLam "y"(bindToLam "y"((bindToLam "x"(mkFreeVar "y")) `mkApp` (bindToLam "y"(mkFreeVar "x")))))(bindToLam "y"(bindToLam "y"(mkFreeVar "y"))),
    Res "(\\x -> x) (x x) (y y y)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "y")))(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "y"))),
    Res "(\\y -> x y) (y y (\\x -> x))"((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "x") `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (bindToLam "x"(mkFreeVar "x")))),
    Res "(\\y -> x y) ((\\x -> x) (\\x -> x))"((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))((mkFreeVar "x") `mkApp` (bindToLam "x"(mkFreeVar "x"))),
    Res "(\\y -> x y) (\\z -> y)"((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "z"(mkFreeVar "y")))((mkFreeVar "x") `mkApp` (bindToLam "z"(mkFreeVar "y"))),
    Res "\\x -> \\x -> (\\x -> y) (x x)"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "y"))),
    Res "\\x -> (\\y -> z) (x x y)"(bindToLam "x"((bindToLam "y"(mkFreeVar "z")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y"))))(bindToLam "x"(mkFreeVar "z")),
    Res "y y x ((\\x -> x) y)"((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")))((((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "y")),
    Res "(\\x -> x) x (y y x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x")))((mkFreeVar "x") `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (mkFreeVar "x"))),
    Res "\\x -> \\x -> (\\y -> x) (\\x -> y)"(bindToLam "x"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "y")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\y -> \\y -> (\\y -> x) (\\x -> y)"(bindToLam "y"(bindToLam "y"((bindToLam "y"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "y")))))(bindToLam "y"(bindToLam "y"(mkFreeVar "x"))),
    Res "(\\x -> \\x -> y) (z (x x))"((bindToLam "x"(bindToLam "x"(mkFreeVar "y"))) `mkApp` ((mkFreeVar "z") `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "y")),
    Res "(\\x -> \\x -> y) (y y)"((bindToLam "x"(bindToLam "x"(mkFreeVar "y"))) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))(bindToLam "x"(mkFreeVar "y")),
    Res "(\\x -> x) (x x) (\\x -> \\x -> y)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "y"))))(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "y")))),
    Res "(\\x -> x) (y y) (y y (x x))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` (((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "(\\x -> x) (y y) ((\\x -> x) (x x))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "(\\x -> x) (y y) (z y)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y")))(((mkFreeVar "y") `mkApp` (mkFreeVar "y")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "y"))),
    Res "\\x -> \\x -> \\x -> (\\x -> x) z"(bindToLam "x"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))))(bindToLam "x"(bindToLam "x"(bindToLam "x"(mkFreeVar "z")))),
    Res "(\\x -> x) y ((\\x -> x) (y y))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "y")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))))((mkFreeVar "y") `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y"))),
    Res "(\\x -> x) (\\x -> x)"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\x -> x) (\\x -> x)"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\x -> x) (x x)"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\z -> (\\x -> x) z"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))(bindToLam "z"(mkFreeVar "z")),
    Res "\\x -> (\\z -> x) (\\z -> x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\z -> x) (\\x -> x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\z -> x) (x x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\z -> x) x"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "x")))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\x -> x) (\\z -> x)"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "(\\x -> x x) (\\z -> z)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z")))(bindToLam "z"(mkFreeVar "z")),
    Res "(\\z -> z) (\\x -> x x)"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> \\x -> (\\x -> x) (\\x -> x)"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(bindToLam "x"(mkFreeVar "x")))),
    Res "\\x -> \\x -> (\\x -> x) (x x)"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "\\x -> \\z -> (\\x -> x) (x x)"(bindToLam "x"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "\\z -> \\x -> (\\x -> x) z"(bindToLam "z"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))(bindToLam "z"(bindToLam "x"(mkFreeVar "z"))),
    Res "\\z -> \\z -> (\\x -> x) z"(bindToLam "z"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))(bindToLam "z"(bindToLam "z"(mkFreeVar "z"))),
    Res "(\\x -> \\x -> x) (\\x -> \\x -> x)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> \\x -> x) (\\x -> x x)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> \\x -> x) (\\z -> z)"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z")))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> x x) (\\x -> \\x -> x)"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\z -> z) (\\x -> \\x -> x)"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "(\\x -> x) (\\x -> x) ((\\x -> x) (\\x -> x))"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> x) (\\x -> x) (\\y -> \\x -> x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"(bindToLam "x"(mkFreeVar "x"))))(bindToLam "y"(bindToLam "x"(mkFreeVar "x"))),
    Res "(\\x -> x) (\\x -> x) (\\x -> x x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "(\\x -> x) (\\x -> x) (\\z -> z)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z")))(bindToLam "z"(mkFreeVar "z")),
    Res "(\\y -> \\x -> x) ((\\x -> x) (\\x -> x))"((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\x -> x x) ((\\x -> x) (\\x -> x))"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "(\\z -> z) ((\\x -> x) (\\x -> x))"((bindToLam "z"(mkFreeVar "z")) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> \\x -> (\\z -> x) (\\z -> x)"(bindToLam "x"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\z -> (\\z -> x) (\\z -> x)"(bindToLam "x"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "\\y -> \\x -> (\\z -> x) (y y)"(bindToLam "y"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))))(bindToLam "y"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\y -> (\\z -> x) (y y)"(bindToLam "x"(bindToLam "y"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "y")))))(bindToLam "x"(bindToLam "y"(mkFreeVar "x"))),
    Res "\\x -> \\x -> (\\z -> x) (\\x -> x)"(bindToLam "x"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\z -> (\\z -> x) (\\x -> x)"(bindToLam "x"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "\\z -> \\x -> (\\z -> x) (x x)"(bindToLam "z"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\z -> (\\z -> x) (x x)"(bindToLam "x"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "\\z -> \\x -> (\\z -> x) z"(bindToLam "z"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\z -> (\\z -> x) z"(bindToLam "x"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "z"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "\\z -> \\x -> (\\z -> x) x"(bindToLam "z"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\z -> (\\z -> x) x"(bindToLam "x"(bindToLam "z"((bindToLam "z"(mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "(\\x -> \\z -> x) (\\x -> \\z -> x)"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))))(bindToLam "z"(bindToLam "x"(bindToLam "z"(mkFreeVar "x")))),
    Res "(\\x -> \\z -> x) (\\y -> y y)"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))))(bindToLam "z"(bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y")))),
    Res "(\\x -> \\z -> x) ((\\x -> x) (\\x -> x))"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` ((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "(\\x -> \\z -> x) (\\y -> \\x -> x)"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (bindToLam "y"(bindToLam "x"(mkFreeVar "x"))))(bindToLam "z"(bindToLam "y"(bindToLam "x"(mkFreeVar "x")))),
    Res "(\\x -> \\z -> x) (\\z -> z)"((bindToLam "x"(bindToLam "z"(mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z")))(bindToLam "z"(bindToLam "z"(mkFreeVar "z"))),
    Res "(\\y -> y y) (\\x -> \\z -> x)"((bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "y"))) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))))(bindToLam "z"(bindToLam "x"(bindToLam "z"(mkFreeVar "x")))),
    Res "(\\x -> x) (\\x -> x) (\\x -> \\z -> x)"(((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "(\\y -> \\x -> x) (\\x -> \\z -> x)"((bindToLam "y"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> \\x -> (\\x -> x) (\\z -> x)"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(bindToLam "z"(mkFreeVar "x")))),
    Res "\\x -> \\z -> (\\x -> x) (\\z -> x)"(bindToLam "x"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "z"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "z"(bindToLam "z"(mkFreeVar "x")))),
    Res "(\\z -> z) (\\x -> \\z -> x)"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"(bindToLam "z"(mkFreeVar "x"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "x"))),
    Res "\\y -> \\x -> (\\z -> x) (y x)"(bindToLam "y"(bindToLam "x"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x")))))(bindToLam "y"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\y -> (\\z -> x) (y x)"(bindToLam "x"(bindToLam "y"((bindToLam "z"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "y"(mkFreeVar "x"))),
    Res "\\y -> \\x -> (\\x -> x) (y x)"(bindToLam "y"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x")))))(bindToLam "y"(bindToLam "x"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))),
    Res "\\x -> \\y -> (\\x -> x) (y x)"(bindToLam "x"(bindToLam "y"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "y") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "y"((mkFreeVar "y") `mkApp` (mkFreeVar "x")))),
    Res "\\x -> (\\z -> z) (x x (x x))"(bindToLam "x"((bindToLam "z"(mkFreeVar "z")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "\\x -> (\\y -> x) (x x (x x))"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\x -> x x) (x x (x x))"(bindToLam "x"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))),
    Res "\\z -> (\\x -> x x) (\\y -> z)"(bindToLam "z"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "z"))))(bindToLam "z"(mkFreeVar "z")),
    Res "\\x -> (\\x -> x x) (\\z -> z)"(bindToLam "x"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z"))))(bindToLam "x"(bindToLam "z"(mkFreeVar "z"))),
    Res "\\z -> (\\x -> x x) (z z)"(bindToLam "z"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z"))))(bindToLam "z"(((mkFreeVar "z") `mkApp` (mkFreeVar "z")) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z")))),
    Res "\\z -> (\\x -> x x) z"(bindToLam "z"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "z")))(bindToLam "z"((mkFreeVar "z") `mkApp` (mkFreeVar "z"))),
    Res "\\z -> (\\y -> z) (\\x -> x x)"(bindToLam "z"((bindToLam "y"(mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "z"(mkFreeVar "z")),
    Res "\\x -> (\\z -> z) (\\x -> x x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "\\y -> \\x -> (\\y -> x) (x y)"(bindToLam "y"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))))(bindToLam "y"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> \\y -> (\\y -> x) (x y)"(bindToLam "x"(bindToLam "y"((bindToLam "y"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "y")))))(bindToLam "x"(bindToLam "y"(mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) (\\z -> x x)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) (\\x -> x x)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) (x x (x x))"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) (\\z -> z)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) (\\y -> x)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) (x x)"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> x x) x"(bindToLam "x"((bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (mkFreeVar "x")))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\x -> x x) (\\z -> x x)"(bindToLam "x"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\z -> z) (\\z -> x x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "z")) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))),
    Res "\\x -> (\\y -> x) (\\z -> x x)"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` (bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\y -> \\x -> (\\x -> y) (\\y -> x)"(bindToLam "y"(bindToLam "x"((bindToLam "x"(mkFreeVar "y")) `mkApp` (bindToLam "y"(mkFreeVar "x")))))(bindToLam "y"(bindToLam "x"(mkFreeVar "y"))),
    Res "\\x -> \\y -> (\\x -> y) (\\y -> x)"(bindToLam "x"(bindToLam "y"((bindToLam "x"(mkFreeVar "y")) `mkApp` (bindToLam "y"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "y"(mkFreeVar "y"))),
    Res "\\x -> \\x -> \\x -> (\\x -> x) (\\x -> x)"(bindToLam "x"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (bindToLam "x"(mkFreeVar "x"))))))(bindToLam "x"(bindToLam "x"(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))))),
    Res "\\x -> \\x -> \\x -> (\\x -> x) (x x)"(bindToLam "x"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))))(bindToLam "x"(bindToLam "x"(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))),
    Res "\\x -> \\x -> \\z -> (\\x -> x) (x x)"(bindToLam "x"(bindToLam "x"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))))(bindToLam "x"(bindToLam "x"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))),
    Res "\\x -> \\z -> \\z -> (\\x -> x) (x x)"(bindToLam "x"(bindToLam "z"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))))(bindToLam "x"(bindToLam "z"(bindToLam "z"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))))),
    Res "\\z -> \\x -> \\x -> (\\x -> x) z"(bindToLam "z"(bindToLam "x"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))))(bindToLam "z"(bindToLam "x"(bindToLam "x"(mkFreeVar "z")))),
    Res "\\x -> \\z -> \\x -> (\\x -> x) z"(bindToLam "x"(bindToLam "z"(bindToLam "x"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))))(bindToLam "x"(bindToLam "z"(bindToLam "x"(mkFreeVar "z")))),
    Res "\\z -> \\z -> \\z -> (\\x -> x) z"(bindToLam "z"(bindToLam "z"(bindToLam "z"((bindToLam "x"(mkFreeVar "x")) `mkApp` (mkFreeVar "z")))))(bindToLam "z"(bindToLam "z"(bindToLam "z"(mkFreeVar "z")))),
    Res "\\x -> (\\y -> x x) (x x x)"(bindToLam "x"((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\x -> x x) (x x x)"(bindToLam "x"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "x"((((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x")))),
    Res "\\x -> (\\z -> z) (x x x)"(bindToLam "x"((bindToLam "z"(mkFreeVar "z")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "x"(((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\y -> x) (x x x)"(bindToLam "x"((bindToLam "y"(mkFreeVar "x")) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "x"(mkFreeVar "x")),
    Res "\\x -> (\\x -> \\x -> x) (\\x -> \\x -> x)"(bindToLam "x"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\x -> \\x -> x) (x x x)"(bindToLam "x"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` (mkFreeVar "x"))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\x -> \\x -> x) (\\y -> x x)"(bindToLam "x"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\x -> \\x -> x) (\\x -> x x)"(bindToLam "x"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\x -> \\x -> x) (x x (x x))"(bindToLam "x"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (((mkFreeVar "x") `mkApp` (mkFreeVar "x")) `mkApp` ((mkFreeVar "x") `mkApp` (mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\z -> (\\x -> \\x -> x) (\\y -> z)"(bindToLam "z"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "y"(mkFreeVar "z"))))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\x -> \\x -> x) (\\z -> z)"(bindToLam "x"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (bindToLam "z"(mkFreeVar "z"))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\z -> (\\x -> \\x -> x) (z z)"(bindToLam "z"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` ((mkFreeVar "z") `mkApp` (mkFreeVar "z"))))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\z -> (\\x -> \\x -> x) z"(bindToLam "z"((bindToLam "x"(bindToLam "x"(mkFreeVar "x"))) `mkApp` (mkFreeVar "z")))(bindToLam "z"(bindToLam "x"(mkFreeVar "x"))),
    Res "\\x -> (\\y -> x x) (\\x -> \\x -> x)"(bindToLam "x"((bindToLam "y"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x")))))(bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))),
    Res "\\x -> (\\x -> x x) (\\x -> \\x -> x)"(bindToLam "x"((bindToLam "x"((mkFreeVar "x") `mkApp` (mkFreeVar "x"))) `mkApp` (bindToLam "x"(bindToLam "x"(mkFreeVar "x")))))(bindToLam "x"(bindToLam "x"(mkFreeVar "x")))]
    